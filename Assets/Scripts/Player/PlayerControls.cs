//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerControlActions"",
            ""id"": ""fdb035d4-796b-4e9f-9477-3c857d1a9fd9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8aed0312-47b7-4cff-8f6e-ef64844f957c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""254c8ec0-d406-42cf-a864-21f42bdece78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back/Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c0febae3-9de3-4a4a-a0f3-4296b1f88e18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GroundPound"",
                    ""type"": ""Button"",
                    ""id"": ""319eb477-dd2d-4476-b0f0-76dad6a7598a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""27e91c6e-c5fe-4e29-b9e5-bba4dde9bc0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WorldToggle"",
                    ""type"": ""Button"",
                    ""id"": ""930192a8-0a65-4b17-9fda-cf8f05e384b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""6a2820af-379f-45e6-aa6a-829b36427b43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""90e27e4c-e5ed-4a8e-9ce4-62da6c492306"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseSubmit"",
                    ""type"": ""Button"",
                    ""id"": ""c673bbb2-0b6c-4dc3-975c-bedc54bb821f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LazerGunFire"",
                    ""type"": ""Button"",
                    ""id"": ""f4fb6ea9-7fe1-4285-bfdc-99211bfa48bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LazerGunAlt"",
                    ""type"": ""Button"",
                    ""id"": ""12128e6e-be29-4064-8d18-c749af64f9b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dd31eef8-8ee1-41d4-bb2b-9294d7437061"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponSwap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f7c4a20-245b-4cca-bfbe-9a6bc32b3dc8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""c8a6f756-4796-48d0-88fc-8a5e23658da5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""765ab2a2-96e2-4ac1-bded-d238ce12cc85"",
                    ""expectedControlType"": """",
                    ""processors"": ""Scale(factor=5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ae0f8620-f4dd-4db1-a3ac-6c527a511d64"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3fe9d289-df95-4ef2-a3b6-733a356007a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fa41f202-a6d1-483f-b0cc-b8db7cfc3280"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""6cdcb2ed-c81b-40a5-ac99-3be2f7548c6a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cdcbaf23-1da0-42a1-bbfe-0f6ba3c58f84"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7457191-1fc1-4237-b00c-140e046f4350"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""feafed0f-87b1-4509-be6f-2dafa64ca6dc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98c8b89d-ccf9-4ffc-a06f-5b450f32c301"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7901178-d19c-4955-a4a2-2272cde981db"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GroundPound"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""719d495c-874a-4ed7-9a10-c34eee6c6a6d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""096f922b-6b13-49a3-8be1-3b96bd7ec43b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold(duration=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31415e5e-46dc-4a8d-a100-a05019e3c13d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a62e04eb-1148-4b31-ae71-bdf4b4a13deb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LazerGunFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50b404fa-f837-457e-b30b-ce10767813cd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LazerGunAlt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36670db4-6e1a-4433-a092-dc168d3ad2b7"",
                    ""path"": ""<Mouse>/{Point}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""529f4fbd-5b72-4abb-8a9f-4afcf4938f3e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSubmit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93903e5d-5127-40c5-95a0-67787f022ccf"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back/Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43edd4d-2880-4ad3-b9e0-6319d21ddae7"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back/Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81b07200-2823-4749-bd56-d0fcc2f548bd"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WorldToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad6df5b1-1c98-4f2b-9f60-730ff2bba507"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize"",
                    ""groups"": """",
                    ""action"": ""WeaponSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6f18c8e-47d0-4f76-a9e2-c17260c7806e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d9729d5-7bd4-48b3-8094-3be266554ccc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""912a7267-97f3-4d57-be49-db66efd91d99"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9247bd86-26e8-4618-8413-84a5c6a8e498"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78205a11-828e-4287-93b5-832c63a98df9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControlActions
        m_PlayerControlActions = asset.FindActionMap("PlayerControlActions", throwIfNotFound: true);
        m_PlayerControlActions_Movement = m_PlayerControlActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerControlActions_Jump = m_PlayerControlActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerControlActions_BackPause = m_PlayerControlActions.FindAction("Back/Pause", throwIfNotFound: true);
        m_PlayerControlActions_GroundPound = m_PlayerControlActions.FindAction("GroundPound", throwIfNotFound: true);
        m_PlayerControlActions_Interact = m_PlayerControlActions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerControlActions_WorldToggle = m_PlayerControlActions.FindAction("WorldToggle", throwIfNotFound: true);
        m_PlayerControlActions_Dash = m_PlayerControlActions.FindAction("Dash", throwIfNotFound: true);
        m_PlayerControlActions_Attack = m_PlayerControlActions.FindAction("Attack", throwIfNotFound: true);
        m_PlayerControlActions_MouseSubmit = m_PlayerControlActions.FindAction("MouseSubmit", throwIfNotFound: true);
        m_PlayerControlActions_LazerGunFire = m_PlayerControlActions.FindAction("LazerGunFire", throwIfNotFound: true);
        m_PlayerControlActions_LazerGunAlt = m_PlayerControlActions.FindAction("LazerGunAlt", throwIfNotFound: true);
        m_PlayerControlActions_MousePosition = m_PlayerControlActions.FindAction("MousePosition", throwIfNotFound: true);
        m_PlayerControlActions_WeaponSwap = m_PlayerControlActions.FindAction("WeaponSwap", throwIfNotFound: true);
        m_PlayerControlActions_RightClick = m_PlayerControlActions.FindAction("RightClick", throwIfNotFound: true);
        m_PlayerControlActions_ScrollWheel = m_PlayerControlActions.FindAction("ScrollWheel", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControlActions
    private readonly InputActionMap m_PlayerControlActions;
    private List<IPlayerControlActionsActions> m_PlayerControlActionsActionsCallbackInterfaces = new List<IPlayerControlActionsActions>();
    private readonly InputAction m_PlayerControlActions_Movement;
    private readonly InputAction m_PlayerControlActions_Jump;
    private readonly InputAction m_PlayerControlActions_BackPause;
    private readonly InputAction m_PlayerControlActions_GroundPound;
    private readonly InputAction m_PlayerControlActions_Interact;
    private readonly InputAction m_PlayerControlActions_WorldToggle;
    private readonly InputAction m_PlayerControlActions_Dash;
    private readonly InputAction m_PlayerControlActions_Attack;
    private readonly InputAction m_PlayerControlActions_MouseSubmit;
    private readonly InputAction m_PlayerControlActions_LazerGunFire;
    private readonly InputAction m_PlayerControlActions_LazerGunAlt;
    private readonly InputAction m_PlayerControlActions_MousePosition;
    private readonly InputAction m_PlayerControlActions_WeaponSwap;
    private readonly InputAction m_PlayerControlActions_RightClick;
    private readonly InputAction m_PlayerControlActions_ScrollWheel;
    public struct PlayerControlActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerControlActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerControlActions_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerControlActions_Jump;
        public InputAction @BackPause => m_Wrapper.m_PlayerControlActions_BackPause;
        public InputAction @GroundPound => m_Wrapper.m_PlayerControlActions_GroundPound;
        public InputAction @Interact => m_Wrapper.m_PlayerControlActions_Interact;
        public InputAction @WorldToggle => m_Wrapper.m_PlayerControlActions_WorldToggle;
        public InputAction @Dash => m_Wrapper.m_PlayerControlActions_Dash;
        public InputAction @Attack => m_Wrapper.m_PlayerControlActions_Attack;
        public InputAction @MouseSubmit => m_Wrapper.m_PlayerControlActions_MouseSubmit;
        public InputAction @LazerGunFire => m_Wrapper.m_PlayerControlActions_LazerGunFire;
        public InputAction @LazerGunAlt => m_Wrapper.m_PlayerControlActions_LazerGunAlt;
        public InputAction @MousePosition => m_Wrapper.m_PlayerControlActions_MousePosition;
        public InputAction @WeaponSwap => m_Wrapper.m_PlayerControlActions_WeaponSwap;
        public InputAction @RightClick => m_Wrapper.m_PlayerControlActions_RightClick;
        public InputAction @ScrollWheel => m_Wrapper.m_PlayerControlActions_ScrollWheel;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControlActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @BackPause.started += instance.OnBackPause;
            @BackPause.performed += instance.OnBackPause;
            @BackPause.canceled += instance.OnBackPause;
            @GroundPound.started += instance.OnGroundPound;
            @GroundPound.performed += instance.OnGroundPound;
            @GroundPound.canceled += instance.OnGroundPound;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @WorldToggle.started += instance.OnWorldToggle;
            @WorldToggle.performed += instance.OnWorldToggle;
            @WorldToggle.canceled += instance.OnWorldToggle;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @MouseSubmit.started += instance.OnMouseSubmit;
            @MouseSubmit.performed += instance.OnMouseSubmit;
            @MouseSubmit.canceled += instance.OnMouseSubmit;
            @LazerGunFire.started += instance.OnLazerGunFire;
            @LazerGunFire.performed += instance.OnLazerGunFire;
            @LazerGunFire.canceled += instance.OnLazerGunFire;
            @LazerGunAlt.started += instance.OnLazerGunAlt;
            @LazerGunAlt.performed += instance.OnLazerGunAlt;
            @LazerGunAlt.canceled += instance.OnLazerGunAlt;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @WeaponSwap.started += instance.OnWeaponSwap;
            @WeaponSwap.performed += instance.OnWeaponSwap;
            @WeaponSwap.canceled += instance.OnWeaponSwap;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
        }

        private void UnregisterCallbacks(IPlayerControlActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @BackPause.started -= instance.OnBackPause;
            @BackPause.performed -= instance.OnBackPause;
            @BackPause.canceled -= instance.OnBackPause;
            @GroundPound.started -= instance.OnGroundPound;
            @GroundPound.performed -= instance.OnGroundPound;
            @GroundPound.canceled -= instance.OnGroundPound;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @WorldToggle.started -= instance.OnWorldToggle;
            @WorldToggle.performed -= instance.OnWorldToggle;
            @WorldToggle.canceled -= instance.OnWorldToggle;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @MouseSubmit.started -= instance.OnMouseSubmit;
            @MouseSubmit.performed -= instance.OnMouseSubmit;
            @MouseSubmit.canceled -= instance.OnMouseSubmit;
            @LazerGunFire.started -= instance.OnLazerGunFire;
            @LazerGunFire.performed -= instance.OnLazerGunFire;
            @LazerGunFire.canceled -= instance.OnLazerGunFire;
            @LazerGunAlt.started -= instance.OnLazerGunAlt;
            @LazerGunAlt.performed -= instance.OnLazerGunAlt;
            @LazerGunAlt.canceled -= instance.OnLazerGunAlt;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @WeaponSwap.started -= instance.OnWeaponSwap;
            @WeaponSwap.performed -= instance.OnWeaponSwap;
            @WeaponSwap.canceled -= instance.OnWeaponSwap;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
        }

        public void RemoveCallbacks(IPlayerControlActionsActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlActionsActions @PlayerControlActions => new PlayerControlActionsActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IPlayerControlActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnBackPause(InputAction.CallbackContext context);
        void OnGroundPound(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnWorldToggle(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnMouseSubmit(InputAction.CallbackContext context);
        void OnLazerGunFire(InputAction.CallbackContext context);
        void OnLazerGunAlt(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnWeaponSwap(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnScrollWheel(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
